#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –¥–ª—è SecureLink VPN
(–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ .env –∫–∞–∫ App.py)
"""
import os
import logging
from datetime import datetime
from dotenv import load_dotenv

import psycopg2
from psycopg2 import sql

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# --- load .env ---
load_dotenv()

# --- logging ---
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# --- config (from .env) ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", os.getenv("BOT_TOKEN", "8271035383:AAHTbW40nfLzucEU7ZYWQziGv16kDx4ph5o"))
WEB_APP_URL = os.getenv("WEB_APP_URL", os.getenv("APP_URL", "https://127.0.0.1:9000"))

# Database config: prefer DATABASE_URL, else use PG_* vars (same style as App.py)
DATABASE_URL = os.getenv("DATABASE_URL")
PG_HOST = os.getenv("PG_HOST", "localhost")
PG_PORT = int(os.getenv("PG_PORT", "5432"))
PG_DB = os.getenv("PG_DB", os.getenv("PG_DB", "securelink_db"))
PG_USER = os.getenv("PG_USER", os.getenv("PG_USER", "securelink"))
PG_PASSWORD = os.getenv("PG_PASSWORD", os.getenv("PG_PASSWORD", ""))

# Plans
PLANS = {
    9: {"name": "3 –¥–Ω—è", "price": 0, "days": 3, "emoji": "üÜì"},
    1: {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30, "emoji": "üìÖ"},
    2: {"name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 499, "days": 180, "emoji": "üìÜ"},
    3: {"name": "12 –º–µ—Å—è—Ü–µ–≤", "price": 999, "days": 365, "emoji": "üóìÔ∏è"}
}

def build_conninfo():
    """–°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ App.py"""
    if DATABASE_URL:
        return DATABASE_URL
    # psycopg2 accepts DSN like: host=.. port=.. dbname=.. user=.. password=..
    return f"host={PG_HOST} port={PG_PORT} dbname={PG_DB} user={PG_USER} password={PG_PASSWORD}"

CONNINFO = build_conninfo()

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ Postgres ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç psycopg2 connection –∏–ª–∏ None"""
    try:
        conn = psycopg2.connect(CONNINFO)
        return conn
    except Exception as e:
        logger.error("Database connection error: %s", e)
        return None

def ensure_users_table():
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–±–µ–∑ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è)"""
    conn = get_db_connection()
    if not conn:
        return
    try:
        with conn:
            with conn.cursor() as cur:
                cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    language_code TEXT,
                    created_at TIMESTAMP WITH TIME ZONE,
                    last_login TIMESTAMP WITH TIME ZONE
                );
                """)
        logger.info("Ensured users table exists")
    except Exception as e:
        logger.exception("Failed to ensure users table: %s", e)
    finally:
        conn.close()

def create_user(telegram_id, username, first_name, last_name, language_code):
    """–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None"""
    conn = get_db_connection()
    if not conn:
        return None
    try:
        with conn:
            with conn.cursor() as cur:
                cur.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
                row = cur.fetchone()
                if row:
                    user_id = row[0]
                    cur.execute("UPDATE users SET last_login = NOW() WHERE id = %s", (user_id,))
                    return user_id
                cur.execute(
                    "INSERT INTO users (telegram_id, username, first_name, last_name, language_code, created_at, last_login) "
                    "VALUES (%s, %s, %s, %s, %s, NOW(), NOW()) RETURNING id",
                    (telegram_id, username, first_name, last_name, language_code)
                )
                user_id = cur.fetchone()[0]
                return user_id
    except Exception as e:
        logger.exception("Error creating user: %s", e)
        return None
    finally:
        conn.close()

def make_dashboard_button(path="/dashboard"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardButton: –µ—Å–ª–∏ WEB_APP_URL HTTPS -> WebAppInfo, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω–∞—è url-–∫–Ω–æ–ø–∫–∞"""
    url_full = WEB_APP_URL.rstrip("/") + path
    if url_full.startswith("https://"):
        return InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=url_full))
    else:
        # Telegram —Ç—Ä–µ–±—É–µ—Ç https –¥–ª—è web_app; –¥–ª—è –ª–æ–∫–∞–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é url –∫–Ω–æ–ø–∫—É (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
        return InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=url_full)

# --- Handlers ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = create_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code
    )
    if not user_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    welcome_text = f"""
üîí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecureLink VPN!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    keyboard = [
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("üìä –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account"), make_dashboard_button("/dashboard")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üîí <b>SecureLink VPN - –ü–æ–º–æ—â—å</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/plans - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã\n"
        "/account - –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
    )
    keyboard = [[InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans"), make_dashboard_button("/dashboard")]]
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_plans(update, context)

async def account_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_account(update, context)

async def show_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plans_text = "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã SecureLink VPN</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
    keyboard = []
    for plan_id, plan in PLANS.items():
        button_text = f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plan_{plan_id}")])
    keyboard.append([make_dashboard_button("/dashboard")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(plans_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    else:
        await update.message.reply_text(plans_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

async def show_plan_details(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int):
    plan = PLANS.get(plan_id)
    if not plan:
        return
    text = (
        f"{plan['emoji']} <b>{plan['name']}</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {plan['price']} ‚ÇΩ\n"
        f"<b>–°—Ä–æ–∫:</b> {plan['days']} –¥–Ω–µ–π\n\n"
        "–ì–æ—Ç–æ–≤—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?"
    )
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_plans")]
    ]
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (
        f"üë§ <b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name or ''}\n"
        f"<b>Username:</b> @{user.username or '‚Äî'}\n"
        f"<b>ID:</b> {user.id}\n"
    )
    keyboard = [[InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans"), make_dashboard_button("/dashboard")]]
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: (–ø–æ–∫–∞ –ø—É—Å—Ç–æ –≤ –¥–µ–º–æ)"
    await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_account")]]))

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""

    if data == "show_plans":
        await show_plans(update, context)
    elif data == "my_account":
        await show_account(update, context)
    elif data == "help":
        await help_command(update, context)
    elif data.startswith("plan_"):
        plan_id = int(data.split("_", 1)[1])
        await show_plan_details(update, context, plan_id)
    elif data.startswith("pay_"):
        plan_id = int(data.split("_", 1)[1])
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
        await query.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {PLANS.get(plan_id, {}).get('name', '')} ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.", parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup([[make_dashboard_button("/dashboard")]]))
    elif data == "show_stats":
        await show_stats(update, context)
    else:
        # fallback
        logger.info("Unknown callback data: %s", data)
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Update %s caused error %s", update, context.error)

# --- bootstrapping & run ---
def main():
    # ensure users table (optional)
    ensure_users_table()

    application = Application.builder().token(BOT_TOKEN).build()

    # handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("plans", plans_command))
    application.add_handler(CommandHandler("account", account_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_error_handler(error_handler)

    # run polling (close_loop=False —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–∫—Ä—ã–≤–∞—Ç—å loop –≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö –≥–¥–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω loop)
    logger.info("Starting SecureLink Telegram Bot...")
    application.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
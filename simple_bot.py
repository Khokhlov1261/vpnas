#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è SecureLink VPN –Ω–∞ aiogram 3
"""
import os
import logging
import asyncio
from io import BytesIO
from datetime import datetime
import json

import psycopg2
import requests
import qrcode

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo,
    FSInputFile, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.filters import Command
from dotenv import load_dotenv

# -------------------- –ó–∞–≥—Ä—É–∑–∫–∞ .env --------------------
load_dotenv()

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
WEB_APP_URL = os.environ.get("WEB_APP_URL", "https://truesocial.ru/dashboard")
BACKEND_URL = os.environ.get("BACKEND_URL", "http://app:9000")

# –ü–ª–∞–Ω—ã —Ç–∞—Ä–∏—Ñ–æ–≤
PLANS_UI = {
    1: {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30, "emoji": "üìÖ"},
    2: {"name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 499, "days": 180, "emoji": "üìÜ"},
    3: {"name": "12 –º–µ—Å—è—Ü–µ–≤", "price": 999, "days": 365, "emoji": "üóìÔ∏è"}
}

INSTRUCTION_TEXT = (
    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n"
    "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard (iOS/Android/macOS/Windows).\n"
    "2) –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π .conf —Ñ–∞–π–ª.\n"
    "3) –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
)

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ --------------------
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# -------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π --------------------
PAYMENT_STATE = {}

# -------------------- –†–∞–±–æ—Ç–∞ —Å –ë–î --------------------
def get_db_connection():
    try:
        return psycopg2.connect(
            dbname=os.environ.get("PG_DB", "securelink"),
            user=os.environ.get("PG_USER", "securelink"),
            password=os.environ.get("PG_PASSWORD"),
            host=os.environ.get("PG_HOST", "localhost"),
            port=os.environ.get("PG_PORT", 5432)
        )
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return None

def create_user(telegram_id, username, first_name, last_name, language_code):
    conn = get_db_connection()
    if not conn:
        return None
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE telegram_id=%s", (telegram_id,))
    row = cur.fetchone()
    if row:
        user_id = row[0]
        cur.execute("UPDATE users SET last_login=NOW() WHERE id=%s", (user_id,))
        conn.commit()
        conn.close()
        return user_id
    cur.execute(
        """
        INSERT INTO users (telegram_id, username, first_name, last_name, language_code, created_at, last_login)
        VALUES (%s,%s,%s,%s,%s,NOW(),NOW()) RETURNING id
        """,
        (telegram_id, username, first_name, last_name, language_code)
    )
    user_id = cur.fetchone()[0]
    conn.commit()
    conn.close()
    logger.info(f"Created new user {user_id}")
    return user_id

def get_user_token(user_id):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è web_app
    return None

def get_latest_paid_order_for_telegram(telegram_id):
    conn = get_db_connection()
    if not conn:
        return None
    cur = conn.cursor()
    cur.execute(
        """
        SELECT id, conf_file, plan, expires_at
        FROM orders
        WHERE telegram_id=%s AND status='paid' AND conf_file IS NOT NULL
        ORDER BY created_at DESC
        LIMIT 1
        """,
        (telegram_id,)
    )
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    return {"id": row[0], "conf_file": row[1], "plan": row[2], "expires_at": row[3]}

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def main_keyboard(user_id):
    token = get_user_token(user_id)
    url = f"{WEB_APP_URL}/dashboard"
    if token:
        url += f"?token={token}"

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
            [InlineKeyboardButton(text="üìä –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account")],
            [InlineKeyboardButton(text="üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=url))],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )

def plans_keyboard():
    buttons = [
        [InlineKeyboardButton(text=f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ",
                              callback_data=f"plan_{plan_id}")]
        for plan_id, plan in PLANS_UI.items()
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def plan_detail_keyboard(plan_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_plans")]
    ])

# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user = message.from_user
    user_id = create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)
    welcome_text = f"""
üîí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecureLink VPN!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:
"""
    await message.answer(welcome_text, reply_markup=main_keyboard(user_id))

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "üîí <b>SecureLink VPN - –ü–æ–º–æ—â—å</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

# –ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤
@dp.callback_query(lambda c: c.data == "show_plans")
async def show_plans_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("üí∞ <b>–¢–∞—Ä–∏—Ñ—ã SecureLink VPN</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=plans_keyboard())
    await callback.answer()

# –î–µ—Ç–∞–ª–∏ —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query(lambda c: c.data.startswith("plan_"))
async def plan_details(callback: types.CallbackQuery):
    plan_id = int(callback.data.split("_")[1])
    plan = PLANS_UI.get(plan_id)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    text = f"""
{plan['emoji']} <b>{plan['name']}</b>

<b>–¶–µ–Ω–∞:</b> {plan['price']} ‚ÇΩ
<b>–°—Ä–æ–∫:</b> {plan['days']} –¥–Ω–µ–π
<b>–¢—Ä–∞—Ñ–∏–∫:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
<b>–°–µ—Ä–≤–µ—Ä—ã:</b> –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> 24/7
"""
    await callback.message.edit_text(text, reply_markup=plan_detail_keyboard(plan_id))
    await callback.answer()

# –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query(lambda c: c.data.startswith("pay_"))
async def pay_plan(callback: types.CallbackQuery):
    plan_id = int(callback.data.split("_")[1])
    plan = PLANS_UI.get(plan_id)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    if plan['price'] == 0:
        await callback.message.edit_text(f"üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ '{plan['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_plans")]]))
        await callback.answer()
        return

    PAYMENT_STATE[callback.from_user.id] = {"plan_id": plan_id, "awaiting_contact": True}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(lambda m: m.contact is not None)
async def handle_contact(message: types.Message):
    state = PAYMENT_STATE.get(message.from_user.id)
    if not state or not state.get("awaiting_contact"):
        return
    phone = message.contact.phone_number.strip()
    plan_id = state["plan_id"]
    await message.delete()
    await message.answer(" ", reply_markup=ReplyKeyboardRemove())
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ backend
    try:
        requests.post(f"{BACKEND_URL}/bot/link-phone", json={"phone": phone, "telegram_id": message.from_user.id}, timeout=10)
        resp = requests.post(f"{BACKEND_URL}/create-payment", json={"email": phone, "plan_id": plan_id}, timeout=20)
        data = resp.json() if resp.ok else None
        url = data.get("confirmation_url") if data else None
        if not url:
            raise RuntimeError(f"Backend error: {resp.status_code} {resp.text}")
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)]])
        msg = await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        state.update({"awaiting_contact": False, "phone": phone})
    except Exception as e:
        logger.error(f"Payment create error: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç
@dp.callback_query(lambda c: c.data == "my_account")
async def my_account(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)
    url = f"{WEB_APP_URL}/dashboard"
    token = get_user_token(user_id)
    if token:
        url += f"?token={token}"
    text = f"""
üë§ <b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}
<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>ID:</b> {user.id}
<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%d.%m.%Y')}
"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=url))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    user_id = create_user(callback.from_user.id, callback.from_user.username, callback.from_user.first_name, callback.from_user.last_name, callback.from_user.language_code)
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(user_id))
    await callback.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data == "get_config")
async def send_config(callback: types.CallbackQuery):
    order = get_latest_paid_order_for_telegram(callback.from_user.id)
    if not order:
        await callback.answer("–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    try:
        doc = FSInputFile(order["conf_file"], filename=f"securelink_{order['id']}.conf")
        await bot.send_document(chat_id=callback.from_user.id, document=doc, caption=f"–¢–∞—Ä–∏—Ñ: {order['plan']}\n{INSTRUCTION_TEXT}")
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"Failed to send config: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞", show_alert=True)

# –û—Ç–ø—Ä–∞–≤–∫–∞ QR
@dp.callback_query(lambda c: c.data == "get_qr")
async def send_qr(callback: types.CallbackQuery):
    order = get_latest_paid_order_for_telegram(callback.from_user.id)
    if not order:
        await callback.answer("–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    try:
        with open(order["conf_file"], "r") as f:
            buf = BytesIO()
            qrcode.make(f.read()).save(buf, format="PNG")
            buf.seek(0)
            photo = BufferedInputFile(buf.read(), filename=f"securelink_{order['id']}.png")
            await bot.send_photo(chat_id=callback.from_user.id, photo=photo, caption=f"QR –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥–∞ (—Ç–∞—Ä–∏—Ñ: {order['plan']})\n{INSTRUCTION_TEXT}")
        await callback.answer("QR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"Failed to send QR: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR", show_alert=True)

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
async def main():
    logger.info("Starting SecureLink Telegram Bot...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
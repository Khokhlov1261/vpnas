#!/usr/bin/env python3
import os
import logging
import psycopg2
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

logging.basicConfig(format='[%(levelname)s] %(asctime)s %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8271035383:AAHTbW40nfLzucEU7ZYWQziGv16kDx4ph5o"
WEB_APP_URL = os.getenv("WEB_APP_URL", "https://147.45.117.195:9000")
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://alexanderkhokhlov@localhost/securelink")

PLANS = {
    9: {"name": "3 –¥–Ω—è", "price": 0, "days": 3, "emoji": "üÜì"},
    1: {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30, "emoji": "üìÖ"},
    2: {"name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 499, "days": 180, "emoji": "üìÜ"},
    3: {"name": "12 –º–µ—Å—è—Ü–µ–≤", "price": 999, "days": 365, "emoji": "üóìÔ∏è"}
}

def get_db_connection():
    try:
        return psycopg2.connect(DATABASE_URL)
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return None

def create_user(telegram_id, username, first_name, last_name, language_code):
    try:
        conn = get_db_connection()
        if not conn:
            return None
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
        existing_user = cursor.fetchone()
        if existing_user:
            cursor.execute("UPDATE users SET last_login = NOW() WHERE telegram_id = %s", (telegram_id,))
            conn.commit()
            conn.close()
            return existing_user[0]
        cursor.execute("""
            INSERT INTO users (telegram_id, username, first_name, last_name, language_code, created_at, last_login)
            VALUES (%s,%s,%s,%s,%s,NOW(),NOW()) RETURNING id
        """, (telegram_id, username, first_name, last_name, language_code))
        user_id = cursor.fetchone()[0]
        conn.commit()
        conn.close()
        logger.info(f"Created new user: {user_id}")
        return user_id
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        return None

# ------------------- –ö–æ–º–∞–Ω–¥—ã -------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)

    welcome_text = f"üîí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecureLink VPN!</b>\n\n–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    keyboard = [
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("üìä –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account")],
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML,
                                    reply_markup=InlineKeyboardMarkup(keyboard))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = "üîí <b>SecureLink VPN - –ü–æ–º–æ—â—å</b>\n\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n/start, /plans, /account, /help"
    keyboard = [
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")]
    ]
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML,
                                    reply_markup=InlineKeyboardMarkup(keyboard))

async def plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã SecureLink VPN</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
    keyboard = [
        [InlineKeyboardButton(f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ", callback_data=f"plan_{pid}")]
        for pid, plan in PLANS.items()
    ]
    keyboard.append([InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")])
    await update.message.reply_text(text, parse_mode=ParseMode.HTML,
                                    reply_markup=InlineKeyboardMarkup(keyboard))

async def account_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = f"üë§ <b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name or ''}\n<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n<b>ID:</b> {user.id}"
    keyboard = [
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")]
    ]
    await update.message.reply_text(text, parse_mode=ParseMode.HTML,
                                    reply_markup=InlineKeyboardMarkup(keyboard))

# ------------------- Callback -------------------
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –¢–µ–ø–µ—Ä—å –≤—Å–µ callback —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç query.edit_message_text
    if data == "show_plans":
        await show_plans_callback(query)
    elif data == "my_account":
        await show_account_callback(query)
    elif data == "help":
        await help_callback(query)
    elif data.startswith("plan_"):
        plan_id = int(data.split("_")[1])
        await show_plan_details_callback(query, plan_id)
    elif data.startswith("pay_"):
        plan_id = int(data.split("_")[1])
        await create_payment_callback(query, plan_id)
    elif data == "show_stats":
        await show_stats_callback(query)

# ------------------- Callback Handlers -------------------
async def show_plans_callback(query):
    text = "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã SecureLink VPN</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
    keyboard = [
        [InlineKeyboardButton(f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ", callback_data=f"plan_{pid}")]
        for pid, plan in PLANS.items()
    ]
    keyboard.append([InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")])
    await query.edit_message_text(text, parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def show_plan_details_callback(query, plan_id):
    plan = PLANS.get(plan_id)
    if not plan:
        return
    text = f"{plan['emoji']} <b>{plan['name']}</b>\n<b>–¶–µ–Ω–∞:</b> {plan['price']} ‚ÇΩ\n<b>–°—Ä–æ–∫:</b> {plan['days']} –¥–Ω–µ–π"
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_plans")]
    ]
    await query.edit_message_text(text, parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def create_payment_callback(query, plan_id):
    plan = PLANS.get(plan_id)
    if not plan:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    text = "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!" if plan['price']==0 else f"üí≥ –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {plan['name']} –∑–∞ {plan['price']} ‚ÇΩ"
    keyboard = [
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_plans")]
    ]
    await query.edit_message_text(text, parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def show_account_callback(query):
    user = query.from_user
    text = f"üë§ <b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name or ''}\n<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n<b>ID:</b> {user.id}"
    keyboard = [
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
    ]
    await query.edit_message_text(text, parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def show_stats_callback(query):
    user = query.from_user
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}\n–¢—Ä–∞—Ñ–∏–∫: 0 MB"
    keyboard = [
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_account")]
    ]
    await query.edit_message_text(text, parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def help_callback(query):
    text = "üîí <b>–ü–æ–º–æ—â—å SecureLink VPN</b>\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /plans, /account"
    keyboard = [
        [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard")]
    ]
    await query.edit_message_text(text, parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def error_handler(update, context):
    logger.error(f"Update {update} caused error {context.error}")

# ------------------- Main -------------------
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("plans", plans_command))
    app.add_handler(CommandHandler("account", account_command))
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    app.add_error_handler(error_handler)
    logger.info("Bot started...")
    app.run_polling()
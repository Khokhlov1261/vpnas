#BOT_TOKEN = "8271035383:AAHTbW40nfLzucEU7ZYWQziGv16kDx4ph5o"




#!/usr/bin/env python3
"""
SecureLink VPN Telegram Bot (aiogram 3) —Å WebApp —Ç–æ–∫–µ–Ω–æ–º
"""
import os
import logging
import asyncio
import psycopg2
import secrets
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.filters import Command
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è --------------------
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
BOT_TOKEN = "8271035383:AAHTbW40nfLzucEU7ZYWQziGv16kDx4ph5o"
WEB_APP_URL = os.environ.get("WEB_APP_URL", "https://truesocial.ru")

# –¢–∞—Ä–∏—Ñ—ã
PLANS = {
    9: {"name": "3 –¥–Ω—è", "price": 0, "days": 3, "emoji": "üÜì"},
    1: {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30, "emoji": "üìÖ"},
    2: {"name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 499, "days": 180, "emoji": "üìÜ"},
    3: {"name": "12 –º–µ—Å—è—Ü–µ–≤", "price": 999, "days": 365, "emoji": "üóìÔ∏è"}
}

# -------------------- –†–∞–±–æ—Ç–∞ —Å –ë–î --------------------
def get_db_connection():
    try:
        conn = psycopg2.connect(
            dbname=os.environ.get("PG_DB", "securelink_db"),
            user=os.environ.get("PG_USER", "securelink"),
            password=os.environ.get("PG_PASSWORD"),
            host=os.environ.get("PG_HOST", "localhost"),
            port=os.environ.get("PG_PORT", 5432)
        )
        return conn
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return None

def create_user(telegram_id, username, first_name, last_name, language_code):
    try:
        conn = get_db_connection()
        if not conn:
            return None
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
        existing_user = cursor.fetchone()
        if existing_user:
            cursor.execute("UPDATE users SET last_login = NOW() WHERE telegram_id = %s", (telegram_id,))
            conn.commit()
            conn.close()
            return existing_user[0]
        cursor.execute("""
            INSERT INTO users (telegram_id, username, first_name, last_name, language_code, created_at, last_login)
            VALUES (%s, %s, %s, %s, %s, NOW(), NOW())
            RETURNING id
        """, (telegram_id, username, first_name, last_name, language_code))
        user_id = cursor.fetchone()[0]
        conn.commit()
        conn.close()
        logger.info(f"Created new user: {user_id} (telegram_id: {telegram_id})")
        return user_id
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        return None

# -------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebApp --------------------
def generate_dashboard_token(telegram_id):
    token = secrets.token_urlsafe(16)
    expires_at = datetime.now() + timedelta(minutes=10)
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO dashboard_tokens (telegram_id, token, expires_at)
        VALUES (%s, %s, %s)
        ON CONFLICT (telegram_id) DO UPDATE
        SET token = EXCLUDED.token, expires_at = EXCLUDED.expires_at
    """, (telegram_id, token, expires_at))
    conn.commit()
    conn.close()
    return token

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ --------------------
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def main_keyboard(user_id=None):
    buttons = [
        [InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account")],
        [InlineKeyboardButton(text="üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard" if not user_id else f"{WEB_APP_URL}/dashboard?token={generate_dashboard_token(user_id)}")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def plans_keyboard(user_id):
    keyboard = []
    for plan_id, plan in PLANS.items():
        keyboard.append([InlineKeyboardButton(text=f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ", callback_data=f"plan_{plan_id}")])
    keyboard.append([InlineKeyboardButton(text="üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard?token={generate_dashboard_token(user_id)}")])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def plan_detail_keyboard(plan_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_plans")]
    ])

# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user = message.from_user
    create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)
    welcome_text = f"""
üîí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecureLink VPN!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É VPN —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º WireGuard.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ VPN –∑–∞ 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ üí≥ –ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ YooKassa
‚Ä¢ üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ QR-–∫–æ–¥
‚Ä¢ üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ üîß –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    await message.answer(welcome_text, reply_markup=main_keyboard(user.id))

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        f"üîí <b>SecureLink VPN - –ü–æ–º–æ—â—å</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/plans - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã\n"
        "/account - –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        f"–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {WEB_APP_URL}/dashboard",
        reply_markup=main_keyboard()
    )

@dp.callback_query(lambda c: c.data == "show_plans")
async def show_plans_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã SecureLink VPN</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:",
        reply_markup=plans_keyboard(callback.from_user.id)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("plan_"))
async def plan_details(callback: types.CallbackQuery):
    plan_id = int(callback.data.split("_")[1])
    plan = PLANS.get(plan_id)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    plan_text = f"""
{plan['emoji']} <b>{plan['name']}</b>

<b>–¶–µ–Ω–∞:</b> {plan['price']} ‚ÇΩ
<b>–°—Ä–æ–∫:</b> {plan['days']} –¥–Ω–µ–π
<b>–¢—Ä–∞—Ñ–∏–∫:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
<b>–°–µ—Ä–≤–µ—Ä—ã:</b> –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> 24/7

<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª WireGuard
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
‚úÖ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
"""
    await callback.message.edit_text(plan_text, reply_markup=plan_detail_keyboard(plan_id))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("pay_"))
async def create_payment(callback: types.CallbackQuery):
    plan_id = int(callback.data.split("_")[1])
    plan = PLANS.get(plan_id)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    if plan['price'] == 0:
        text = "üéâ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n–í–∞—à VPN –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ 3 –¥–Ω—è."
    else:
        text = f"üí≥ –û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {plan['name']}\n<b>–°—É–º–º–∞:</b> {plan['price']} ‚ÇΩ\n<b>–°—Ä–æ–∫:</b> {plan['days']} –¥–Ω–µ–π\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã: {WEB_APP_URL}/dashboard?token={generate_dashboard_token(callback.from_user.id)}"
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_plans")]
    ]))
    await callback.answer()

@dp.callback_query(lambda c: c.data == "my_account")
async def my_account(callback: types.CallbackQuery):
    user = callback.from_user
    text = f"""
üë§ <b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}
<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>ID:</b> {user.id}

<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%d.%m.%Y')}
"""
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton(text="üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=f"{WEB_APP_URL}/dashboard?token={generate_dashboard_token(user.id)}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")]
    ]))
    await callback.answer()

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
async def main():
    logger.info("Starting SecureLink Telegram Bot...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
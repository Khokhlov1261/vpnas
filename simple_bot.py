#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –¥–ª—è SecureLink VPN –Ω–∞ aiogram 3
"""
import os
import logging
import asyncio
import psycopg2
import secrets
from datetime import datetime
from io import BytesIO

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, FSInputFile, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from dotenv import load_dotenv
from services.orders import PLANS
import json
import requests
import qrcode

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
WEB_APP_URL = os.environ.get("WEB_APP_URL", "https://truesocial.ru/dashboard")
BACKEND_URL = os.environ.get("BACKEND_URL", os.environ.get("WEB_BACKEND_URL", "http://app:9000"))
BOT_USERNAME = os.environ.get("BOT_USERNAME", "Securelinkvpn_bot")

PLANS_UI = {
    1: {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30, "emoji": "üìÖ"},
    2: {"name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 499, "days": 180, "emoji": "üìÜ"},
    3: {"name": "12 –º–µ—Å—è—Ü–µ–≤", "price": 999, "days": 365, "emoji": "üóìÔ∏è"}
}

# -------------------- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π --------------------
def get_db_connection():
    try:
        return psycopg2.connect(
            dbname=os.environ.get("PG_DB", "securelink"),
            user=os.environ.get("PG_USER", "securelink"),
            password=os.environ.get("PG_PASSWORD"),
            host=os.environ.get("PG_HOST", "localhost"),
            port=os.environ.get("PG_PORT", 5432)
        )
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        return None

def create_user(telegram_id, username, first_name, last_name, language_code):
    conn = get_db_connection()
    if not conn:
        return None

    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cursor.fetchone()

    if user:
        user_id = user[0]
        cursor.execute("UPDATE users SET last_login = NOW() WHERE id = %s", (user_id,))
        conn.commit()
        conn.close()
        return user_id

    cursor.execute("""
        INSERT INTO users (telegram_id, username, first_name, last_name, language_code, created_at, last_login)
        VALUES (%s, %s, %s, %s, %s, NOW(), NOW())
        RETURNING id
    """, (telegram_id, username, first_name, last_name, language_code))
    user_id = cursor.fetchone()[0]
    conn.commit()
    conn.close()
    logger.info(f"Created new user {user_id}")
    return user_id

def get_user_token(user_id):
    return None

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ --------------------
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–æ–∂–∏–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç)
PAYMENT_STATE = {}

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def main_keyboard(user_id):
    token = get_user_token(user_id)
    # –í—Å–µ–≥–¥–∞ –≤–µ–¥—ë—Ç –Ω–∞ /dashboard
    url = f"{WEB_APP_URL}/dashboard"
    if token:
        url += f"?token={token}"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account")],
        [InlineKeyboardButton(text="üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=url))],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

def plans_keyboard():
    keyboard = []
    for plan_id, plan in PLANS_UI.items():
        button_text = f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"plan_{plan_id}")])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def plan_detail_keyboard(plan_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_plans")]
    ])

# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message(Command("start"))
async def start_command(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep-link –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: /start paid_<planId>_<phone>
    args = message.text.split(maxsplit=1)
    if len(args) == 2 and args[1].startswith("paid_"):
        try:
            rest = args[1][5:]
            plan_id_str, phone = rest.split("_", 1)
            _ = int(plan_id_str)
        except Exception:
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –û—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞.")
        else:
            try:
                conn = get_db_connection()
                cur = conn.cursor()
                # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–ª–∞—Ç–æ–π
                try:
                    cur.execute("SELECT message_ids FROM payment_messages WHERE telegram_id=%s ORDER BY id DESC LIMIT 1", (message.from_user.id,))
                    r2 = cur.fetchone()
                    if r2:
                        stored_ids = r2[0]
                        ids = stored_ids if isinstance(stored_ids, list) else json.loads(stored_ids)
                        for mid in ids:
                            try:
                                await bot.delete_message(chat_id=message.chat.id, message_id=mid)
                            except Exception:
                                pass
                        cur.execute("DELETE FROM payment_messages WHERE telegram_id=%s", (message.from_user.id,))
                        conn.commit()
                except Exception as e:
                    logger.warning(f"delete payment message failed: {e}")
                # –ù–∞—Ö–æ–¥–∏–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                cur.execute(
                    """
                    SELECT id, conf_file, plan FROM orders
                    WHERE email=%s AND status='paid' AND conf_file IS NOT NULL
                    ORDER BY id DESC LIMIT 1
                    """,
                    (phone,)
                )
                row = cur.fetchone()
                conn.close()
                if row and os.path.exists(row[1]):
                    order_id, conf_file, plan_name = row
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º .conf
                        doc = FSInputFile(conf_file, filename=f"securelink_{order_id}.conf")
                        await bot.send_document(chat_id=message.chat.id, document=doc, caption=f"–¢–∞—Ä–∏—Ñ: {plan_name}\n{INSTRUCTION_TEXT}")
                        # QR
                        with open(conf_file, 'r') as f:
                            conf_text = f.read()
                        buf = BytesIO()
                        qrcode.make(conf_text).save(buf, format='PNG')
                        buf.seek(0)
                        photo = BufferedInputFile(buf.read(), filename=f"securelink_{order_id}.png")
                        await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="QR –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –º–µ–Ω—é
                        user = message.from_user
                        user_id = create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)
                        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_keyboard(user_id))
                    except Exception as e:
                        logger.error(f"send conf failed: {e}")
                else:
                    await message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ö–æ–Ω—Ñ–∏–≥ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")
            except Exception as e:
                logger.error(f"deeplink error: {e}")
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ö–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")
        return

    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç
    user = message.from_user
    user_id = create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)
    welcome_text = f"""
üîí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecureLink VPN!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:
"""
    await message.answer(welcome_text, reply_markup=main_keyboard(user_id))

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = f"""
üîí <b>SecureLink VPN - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
"""
    await message.answer(help_text)

@dp.callback_query(lambda c: c.data == "show_plans")
async def show_plans_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("üí∞ <b>–¢–∞—Ä–∏—Ñ—ã SecureLink VPN</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=plans_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("plan_"))
async def plan_details(callback: types.CallbackQuery):
    plan_id = int(callback.data.split("_")[1])
    plan = PLANS_UI.get(plan_id)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    plan_text = f"""
{plan['emoji']} <b>{plan['name']}</b>

<b>–¶–µ–Ω–∞:</b> {plan['price']} ‚ÇΩ
<b>–°—Ä–æ–∫:</b> {plan['days']} –¥–Ω–µ–π
<b>–¢—Ä–∞—Ñ–∏–∫:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
<b>–°–µ—Ä–≤–µ—Ä—ã:</b> –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> 24/7
"""
    await callback.message.edit_text(plan_text, reply_markup=plan_detail_keyboard(plan_id))
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("pay_"))
async def pay_plan(callback: types.CallbackQuery):
    plan_id = int(callback.data.split("_")[1])
    plan = PLANS_UI.get(plan_id)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    if plan['price'] == 0:
        await callback.message.edit_text(f"üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ '{plan['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_plans")]]
        ))
        await callback.answer()
        return
    # –ü—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º
    PAYMENT_STATE[callback.from_user.id] = {"plan_id": plan_id, "awaiting_contact": True}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
    await callback.answer()

@dp.message(lambda m: m.contact is not None)
async def handle_contact_and_create_payment(message: types.Message):
    state = PAYMENT_STATE.get(message.from_user.id)
    if not state or not state.get("awaiting_contact"):
        return
    plan_id = state["plan_id"]
    phone = (message.contact.phone_number or "").strip()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await message.delete()
    except Exception:
        pass
    try:
        await message.answer(" ", reply_markup=ReplyKeyboardRemove())
    except Exception:
        pass
    # –õ–∏–Ω–∫—É–µ–º phone –∫ telegram_id –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    try:
        requests.post(f"{BACKEND_URL}/bot/link-phone", json={"phone": phone, "telegram_id": message.from_user.id}, timeout=10)
    except Exception as e:
        logger.warning(f"link-phone failed: {e}")
    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    try:
        resp = requests.post(f"{BACKEND_URL}/create-payment", json={"email": phone, "plan_id": plan_id}, timeout=20)
        data = resp.json() if resp.ok else None
        url = data.get("confirmation_url") if data else None
        if not url:
            raise RuntimeError(f"backend error: {resp.status_code} {resp.text}")
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)]])
        msg = await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("CREATE TABLE IF NOT EXISTS payment_messages (id SERIAL PRIMARY KEY, telegram_id BIGINT, message_ids JSONB, created_at TIMESTAMPTZ DEFAULT NOW())")
            conn.commit()
            cur.execute("INSERT INTO payment_messages (telegram_id, message_ids) VALUES (%s, %s)", (message.from_user.id, json.dumps([msg.message_id])))
            conn.commit()
            conn.close()
        except Exception as e:
            logger.warning(f"store payment message failed: {e}")
        state["awaiting_contact"] = False
        state["phone"] = phone
    except Exception as e:
        logger.error(f"Payment create error: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message()
async def catch_email_for_payment(message: types.Message):
    state = PAYMENT_STATE.get(message.from_user.id)
    if not state or not state.get("awaiting_email"):
        return
    email = (message.text or "").strip()
    if "@" not in email or "." not in email:
        await message.answer("–ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥.")
        return
    plan_id = state["plan_id"]
    # –í—ã–∑—ã–≤–∞–µ–º backend –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    try:
        # –õ–∏–Ω–∫—É–µ–º email —Å telegram_id –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–ª—è –∞–≤—Ç–æ–¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
        try:
            requests.post(f"{BACKEND_URL}/bot/link-email", json={"email": email, "telegram_id": message.from_user.id}, timeout=10)
        except Exception as e:
            logger.warning(f"link-email failed: {e}")
        resp = requests.post(f"{BACKEND_URL}/create-payment", json={"email": email, "plan_id": plan_id}, timeout=15)
        data = resp.json() if resp.ok else None
        url = data.get("confirmation_url") if data else None
        if not url:
            raise RuntimeError(f"backend error: {resp.status_code} {resp.text}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)], [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_plans")]])
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
        # –°–æ—Ö—Ä–∞–Ω–∏–º email –¥–ª—è —Å–≤—è–∑–∏ —Å telegram_id –≤ –∑–∞–∫–∞–∑–µ (–ø–æ—Å–ª–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏–≤—è–∂–µ–º)
        state["awaiting_email"] = False
        state["email"] = email
    except Exception as e:
        logger.error(f"Payment create error: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data == "my_account")
async def my_account(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)
    token = get_user_token(user_id)
    # –í—Å–µ–≥–¥–∞ –≤–µ–¥—ë—Ç –Ω–∞ /dashboard
    url = f"{WEB_APP_URL}/dashboard"
    if token:
        url += f"?token={token}"
    text = f"""
üë§ <b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}
<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>ID:</b> {user.id}

<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%d.%m.%Y')}
"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton(text="üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=url))],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = create_user(user.id, user.username, user.first_name, user.last_name, user.language_code)
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(user_id))
    await callback.answer()

# -------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ --------------------
def get_latest_paid_order_for_telegram(telegram_id):
    conn = get_db_connection()
    if not conn:
        return None
    cur = conn.cursor()
    cur.execute(
        """
        SELECT id, conf_file, plan, expires_at
        FROM orders
        WHERE telegram_id = %s AND status = 'paid' AND conf_file IS NOT NULL
        ORDER BY created_at DESC
        LIMIT 1
        """,
        (telegram_id,)
    )
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    return {
        "id": row[0],
        "conf_file": row[1],
        "plan": row[2],
        "expires_at": row[3]
    }

INSTRUCTION_TEXT = (
    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n"
    "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard (iOS/Android/macOS/Windows).\n"
    "2) –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π .conf —Ñ–∞–π–ª.\n"
    "3) –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
)

import os
import logging
from aiogram.types import FSInputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

@dp.callback_query(lambda c: c.data == "get_config")
async def send_config(callback: types.CallbackQuery):
    user = callback.from_user
    order = get_latest_paid_order_for_telegram(user.id)

    if not order:
        logger.info(f"No paid orders found for user {user.id}")
        await callback.answer("–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    logger.info(f"Order from DB: {order}")

    # –ë–µ—Ä—ë–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –∏–∑ order, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ id
    conf_path = order.get('conf_file') or f"/securelink/SecureLink/configs/{order['id']}.conf"
    logger.info(f"Using config path: {conf_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(conf_path):
        logger.error(f"Config file does NOT exist at path: {conf_path}")
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    try:
        doc = FSInputFile(conf_path, filename=f"securelink_{order['id']}.conf")
        caption = f"–¢–∞—Ä–∏—Ñ: {order['plan']}\n" + INSTRUCTION_TEXT
        await bot.send_document(chat_id=user.id, document=doc, caption=caption)
        logger.info(f"Config sent to user {user.id}: {conf_path}")
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.exception(f"Failed to send config to user {user.id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞", show_alert=True)
##
@dp.callback_query(lambda c: c.data == "get_qr")
async def send_qr(callback: types.CallbackQuery):
    user = callback.from_user
    order = get_latest_paid_order_for_telegram(user.id)
    if not order or not order.get("conf_file"):
        await callback.answer("–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    conf_path = order["conf_file"]
    try:
        with open(conf_path, "r") as f:
            conf_text = f.read()
        buf = BytesIO()
        qrcode.make(conf_text).save(buf, format="PNG")
        buf.seek(0)
        photo = BufferedInputFile(buf.read(), filename=f"securelink_{order['id']}.png")
        caption = f"QR –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥–∞ (—Ç–∞—Ä–∏—Ñ: {order['plan']}).\n" + INSTRUCTION_TEXT
        await bot.send_photo(chat_id=user.id, photo=photo, caption=caption)
        await callback.answer("QR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"Failed to send qr: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR", show_alert=True)

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
async def main():
    logger.info("Starting SecureLink Telegram Bot...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())#
/**
 * Dashboard JavaScript –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ SecureLink
 * - –ê–≤—Ç–æ-–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Telegram WebApp (initData)
 * - –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ YooKassa)
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤ (.conf –∏ QR) –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
 */

async function fetchJSON(url, opts) {
  const res = await fetch(url, opts);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return res.json();
}

async function ensureJwt() {
  let token = localStorage.getItem('jwt');
  if (token) return token;
  const tg = window.Telegram && window.Telegram.WebApp;
  const initData = tg && tg.initData;
  if (!initData) return null;
  const resp = await fetch('/auth/telegram', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ init_data: initData })
  });
  const data = await resp.json();
  if (data && data.token) {
    localStorage.setItem('jwt', data.token);
    return data.token;
  }
  return null;
}

async function loadUser() {
  try {
    const token = await ensureJwt();
    if (!token) return;
    const data = await fetchJSON('/auth/me', { headers: { 'Authorization': `Bearer ${token}` } });
    const user = data && data.user ? data.user : null;
    if (!user) return;
    // –ó–∞–ø–æ–ª–Ω–∏–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    document.getElementById('username').textContent = user.username ? `@${user.username}` : (user.first_name || 'User');
    document.getElementById('avatarPlaceholder').textContent = (user.first_name || 'U').slice(0,1).toUpperCase();
  } catch (e) {
    console.error('loadUser error', e);
  }
}

async function loadConfigs() {
  try {
    const token = await ensureJwt();
    if (!token) return;
    const res = await fetchJSON('/api/user/configs', { headers: { 'Authorization': `Bearer ${token}` } });
    const listEl = document.getElementById('configsList');
    const quick = document.getElementById('quickConfig');
    const quickDl = document.getElementById('quickDownload');
    const quickShowQR = document.getElementById('quickShowQR');
    const quickQR = document.getElementById('quickQR');
    const quickQRImg = document.getElementById('quickQRImg');
    listEl.innerHTML = '';
    if (!res.configs || res.configs.length === 0) {
      listEl.innerHTML = '<div class="empty">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>';
      quick.style.display = 'none';
      return;
    }
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø
    const first = res.configs[0];
    if (first && first.has_file) {
      quick.style.display = '';
      quickDl.href = first.download_url;
      quickShowQR.onclick = async () => {
        quickQR.style.display = '';
        quickQRImg.src = first.qr_url;
        quickQRImg.onload = () => {};
      };
    } else {
      quick.style.display = 'none';
    }
    res.configs.forEach(cfg => {
      const item = document.createElement('div');
      item.className = 'config-item';
      const actions = [];
      if (cfg.download_url) actions.push(`<a class="btn" href="${cfg.download_url}">–°–∫–∞—á–∞—Ç—å .conf</a>`);
      if (cfg.qr_url) actions.push(`<a class="btn btn-secondary" target="_blank" href="${cfg.qr_url}">–û—Ç–∫—Ä—ã—Ç—å QR</a>`);
      item.innerHTML = `
        <div class="config-meta">
          <div class="config-plan">${cfg.plan || ''}</div>
          <div class="config-dates">${cfg.created_at || ''} ‚Üí ${cfg.expires_at || ''}</div>
          <div class="config-status ${cfg.status}">${cfg.status}</div>
        </div>
        <div class="config-actions">${actions.join(' ')}</div>
      `;
      listEl.appendChild(item);
    });
  } catch (e) {
    console.error('loadConfigs error', e);
  }
}

async function createPayment(planId, phone) {
  try {
    const tg = window.Telegram && window.Telegram.WebApp;
    const tgUser = tg && tg.initDataUnsafe && tg.initDataUnsafe.user;
    const telegramId = tgUser && tgUser.id;
    if (telegramId) {
      await fetch('/bot/link-phone', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone, telegram_id: telegramId })
      });
    }
    const resp = await fetch('/create-payment', {
      method: 'POST', headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: phone, plan_id: planId })
    });
    const data = await resp.json();
    if (data && data.confirmation_url) {
      window.location.href = data.confirmation_url;
    } else {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂');
    }
  } catch (e) {
    console.error('createPayment error', e);
    alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
  }
}

async function loadSubscriptions() {
  try {
    const token = await ensureJwt();
    if (!token) return;
    const res = await fetchJSON('/api/user/subscriptions', { headers: { 'Authorization': `Bearer ${token}` } });
    const listEl = document.getElementById('subscriptionsList');
    listEl.innerHTML = '';

    const plans = [
      { id: 1, name: '1 –º–µ—Å—è—Ü', price: 99 },
      { id: 2, name: '6 –º–µ—Å—è—Ü–µ–≤', price: 499 },
      { id: 3, name: '1 –≥–æ–¥', price: 999 }
    ];

    const plansWrap = document.createElement('div');
    plansWrap.className = 'plans-grid';
    plans.forEach(p => {
      const card = document.createElement('div');
      card.className = 'plan-card';
      card.innerHTML = `
        <h3>${p.name}</h3>
        <div class="price">${p.price} ‚ÇΩ</div>
        <button class="btn btn-primary" data-plan="${p.id}">–û–ø–ª–∞—Ç–∏—Ç—å</button>
      `;
      plansWrap.appendChild(card);
    });
    listEl.appendChild(plansWrap);

    listEl.addEventListener('click', async (e) => {
      const btn = e.target.closest('button[data-plan]');
      if (!btn) return;
      const planId = parseInt(btn.getAttribute('data-plan'), 10);
      const phone = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:');
      if (!phone) return;
      await createPayment(planId, phone);
    }, { once: true });

    if (res.subscriptions && res.subscriptions.length) {
      const myList = document.createElement('div');
      myList.className = 'my-subscriptions';
      res.subscriptions.forEach(s => {
        const row = document.createElement('div');
        row.className = 'sub-row';
        row.innerHTML = `
          <div class="sub-plan">${s.plan}</div>
          <div class="sub-dates">${s.created_at || ''} ‚Üí ${s.expires_at || ''}</div>
          <div class="sub-status ${s.status}">${s.status}</div>
        `;
        myList.appendChild(row);
      });
      listEl.appendChild(myList);
    }
  } catch (e) {
    console.error('loadSubscriptions error', e);
  }
}

async function loadTraffic() {
  try {
    const token = await ensureJwt();
    if (!token) return;
    const res = await fetchJSON('/api/user/traffic', { headers: { 'Authorization': `Bearer ${token}` } });
    // –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    const totalRx = (res.total_rx || 0) / (1024*1024);
    const totalTx = (res.total_tx || 0) / (1024*1024);
    document.getElementById('todayTraffic').textContent = `${totalRx.toFixed(1)} MB`;
    document.getElementById('trafficDetails').textContent = `‚Üì ${totalRx.toFixed(1)} MB ‚Üë ${totalTx.toFixed(1)} MB`;
  } catch (e) {
    console.error('loadTraffic error', e);
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const navLinks = document.querySelectorAll('.nav-link');
  if (navLinks && navLinks.length) {
    navLinks.forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        const section = link.getAttribute('data-section');
        document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
        document.getElementById(section + 'Section').classList.add('active');
        document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
        link.classList.add('active');
        if (section === 'configs') loadConfigs();
        if (section === 'subscriptions') loadSubscriptions();
        if (section === 'traffic') loadTraffic();
      });
    });
  }

  (async () => {
    await ensureJwt();
    await loadUser();
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ (mobile-first)
    await loadConfigs();
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∑–∏–º —Ñ–æ–Ω–æ–º
    loadSubscriptions();
    loadTraffic();
  })();
});

class DashboardApp {
    constructor() {
        this.currentUser = null;
        this.authToken = null;
        this.currentSection = 'dashboard';
        this.telegramWebApp = null;
        
        this.init();
    }
    
    async init() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
            this.initTelegramWebApp();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await this.checkAuth();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
            this.initUI();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadDashboardData();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }
    
    initTelegramWebApp() {
        if (window.Telegram?.WebApp) {
            this.telegramWebApp = window.Telegram.WebApp;
            this.telegramWebApp.ready();
            this.telegramWebApp.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            if (this.telegramWebApp.colorScheme === 'dark') {
                document.body.classList.add('telegram-dark');
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            this.telegramWebApp.MainButton.setText('üöÄ –û—Ç–∫—Ä—ã—Ç—å VPN');
            this.telegramWebApp.MainButton.show();
            this.telegramWebApp.MainButton.onClick(() => {
                window.location.href = '/';
            });
            
            console.log('Telegram Web App initialized:', this.telegramWebApp.initDataUnsafe);
        }
    }
    async checkAuth() {
    this.authToken = localStorage.getItem('authToken');  // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

    if (this.authToken) {
        try {
            const response = await this.apiCall('/auth/me'); // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            this.currentUser = response.user;               // 3. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return;
        } catch {
            localStorage.removeItem('authToken');          // 4. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, —É–¥–∞–ª—è–µ–º
        }
    }

    // 5. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
    if (this.telegramWebApp?.initDataUnsafe?.user) {
        await this.authenticateWithTelegram();            // 6. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
    } else {
        window.location.href = '/';                       // 7. –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    }
}
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
        if (this.telegramWebApp?.initDataUnsafe?.user) {
            await this.authenticateWithTelegram();
        } else {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            window.location.href = '/';
        }
    }
    
    async authenticateWithTelegram() {
        try {
            const initData = this.telegramWebApp.initData;
            
            const response = await fetch('/auth/telegram', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    init_data: initData
                })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                this.authToken = data.token;
                this.currentUser = data.user;
                localStorage.setItem('authToken', this.authToken);
                this.showToast('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!', 'success');
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
            window.location.href = '/';
        }
    }
    
    initUI() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        this.initNavigation();
        
        // –ö–Ω–æ–ø–∫–∏
        this.initButtons();
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.initModals();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        this.updateUserInfo();
    }
    
    initNavigation() {
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = link.dataset.section;
                this.showSection(section);
            });
        });
    }
    
    initButtons() {
        // –í—ã—Ö–æ–¥
        document.getElementById('logoutBtn')?.addEventListener('click', () => {
            this.logout();
        });
        
        // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        document.getElementById('renewSubscriptionBtn')?.addEventListener('click', () => {
            window.location.href = '/';
        });
        
        // –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        document.getElementById('buyNewSubscriptionBtn')?.addEventListener('click', () => {
            window.location.href = '/';
        });
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('saveSettingsBtn')?.addEventListener('click', () => {
            this.saveSettings();
        });
        
        // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        document.getElementById('markAllReadBtn')?.addEventListener('click', () => {
            this.markAllNotificationsRead();
        });
    }
    
    initModals() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('configModalClose')?.addEventListener('click', () => {
            this.closeModal('configModal');
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('configModal')?.addEventListener('click', (e) => {
            if (e.target.id === 'configModal') {
                this.closeModal('configModal');
            }
        });
    }
    
    updateUserInfo() {
        if (!this.currentUser) return;
        
        // –ê–≤–∞—Ç–∞—Ä
        const avatarPlaceholder = document.getElementById('avatarPlaceholder');
        if (avatarPlaceholder) {
            const firstLetter = this.currentUser.first_name?.[0] || this.currentUser.username?.[0] || 'U';
            avatarPlaceholder.textContent = firstLetter.toUpperCase();
        }
        
        // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const username = document.getElementById('username');
        if (username) {
            username.textContent = `@${this.currentUser.username || 'user'}`;
        }
        
        // –ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫)
        const userPlan = document.getElementById('userPlan');
        if (userPlan) {
            userPlan.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        }
    }
    
    async showSection(sectionName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        document.querySelector(`[data-section="${sectionName}"]`)?.classList.add('active');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
        const targetSection = document.getElementById(`${sectionName}Section`);
        if (targetSection) {
            targetSection.classList.add('active');
            this.currentSection = sectionName;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏
            await this.loadSectionData(sectionName);
        }
    }
    
    async loadSectionData(sectionName) {
        switch (sectionName) {
            case 'dashboard':
                await this.loadDashboardData();
                break;
            case 'subscriptions':
                await this.loadSubscriptions();
                break;
            case 'configs':
                await this.loadConfigs();
                break;
            case 'traffic':
                await this.loadTrafficStats();
                break;
            case 'notifications':
                await this.loadNotifications();
                break;
            case 'settings':
                await this.loadSettings();
                break;
        }
    }
    
    async loadDashboardData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è dashboard
            const subscriptionsResponse = await this.apiCall('/api/user/subscriptions');
            if (subscriptionsResponse.ok) {
                this.updateDashboardSubscriptions(subscriptionsResponse.subscriptions);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
            const trafficResponse = await this.apiCall('/api/user/traffic');
            if (trafficResponse.ok) {
                this.updateDashboardTraffic(trafficResponse);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö dashboard:', error);
        }
    }
    
    updateDashboardSubscriptions(subscriptions) {
        const activeSubscription = subscriptions.find(sub => sub.status === 'paid' && !this.isExpired(sub.expires_at));
        
        const activeSubscriptionEl = document.getElementById('activeSubscription');
        const subscriptionExpiryEl = document.getElementById('subscriptionExpiry');
        const userPlanEl = document.getElementById('userPlan');
        const renewBtn = document.getElementById('renewSubscriptionBtn');
        
        if (activeSubscription) {
            if (activeSubscriptionEl) {
                activeSubscriptionEl.textContent = activeSubscription.plan;
            }
            if (subscriptionExpiryEl) {
                subscriptionExpiryEl.textContent = `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${this.formatDate(activeSubscription.expires_at)}`;
            }
            if (userPlanEl) {
                userPlanEl.textContent = activeSubscription.plan;
            }
            if (renewBtn) {
                renewBtn.style.display = 'inline-flex';
            }
        } else {
            if (activeSubscriptionEl) {
                activeSubscriptionEl.textContent = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏';
            }
            if (subscriptionExpiryEl) {
                subscriptionExpiryEl.textContent = '‚Äî';
            }
            if (userPlanEl) {
                userPlanEl.textContent = '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏';
            }
            if (renewBtn) {
                renewBtn.style.display = 'inline-flex';
            }
        }
    }
    
    updateDashboardTraffic(trafficData) {
        const totalRx = trafficData.total_rx || 0;
        const totalTx = trafficData.total_tx || 0;
        const totalTraffic = totalRx + totalTx;
        
        const todayTrafficEl = document.getElementById('todayTraffic');
        const trafficDetailsEl = document.getElementById('trafficDetails');
        const connectionStatusEl = document.getElementById('connectionStatus');
        const connectionIPEl = document.getElementById('connectionIP');
        
        if (todayTrafficEl) {
            todayTrafficEl.textContent = this.formatBytes(totalTraffic);
        }
        if (trafficDetailsEl) {
            trafficDetailsEl.textContent = `‚Üì ${this.formatBytes(totalRx)} ‚Üë ${this.formatBytes(totalTx)}`;
        }
        
        // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const activeConnection = trafficData.traffic?.find(t => t.online);
        if (activeConnection) {
            if (connectionStatusEl) {
                connectionStatusEl.textContent = '–û–Ω–ª–∞–π–Ω';
                connectionStatusEl.className = 'stat-value online';
            }
            if (connectionIPEl) {
                connectionIPEl.textContent = `IP: ${activeConnection.client_ip}`;
            }
        } else {
            if (connectionStatusEl) {
                connectionStatusEl.textContent = '–û—Ñ–ª–∞–π–Ω';
                connectionStatusEl.className = 'stat-value offline';
            }
            if (connectionIPEl) {
                connectionIPEl.textContent = '‚Äî';
            }
        }
    }
    
    async loadSubscriptions() {
        const container = document.getElementById('subscriptionsList');
        if (!container) return;
        
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...</div>';
        
        try {
            const response = await this.apiCall('/api/user/subscriptions');
            if (response.ok) {
                this.renderSubscriptions(response.subscriptions);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
            container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫</div>';
        }
    }
    
    renderSubscriptions(subscriptions) {
        const container = document.getElementById('subscriptionsList');
        if (!container) return;
        
        if (subscriptions.length === 0) {
            container.innerHTML = '<div class="empty-state">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫</div>';
            return;
        }
        
        container.innerHTML = subscriptions.map(sub => `
            <div class="subscription-item">
                <div class="item-header">
                    <div class="item-title">${sub.plan}</div>
                    <div class="item-status ${this.getStatusClass(sub.status, sub.expires_at)}">
                        ${this.getStatusText(sub.status, sub.expires_at)}
                    </div>
                </div>
                <div class="item-details">
                    <div class="detail-item">
                        <div class="detail-label">–¶–µ–Ω–∞</div>
                        <div class="detail-value">${sub.price} ‚ÇΩ</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</div>
                        <div class="detail-value">${this.formatDate(sub.created_at)}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ</div>
                        <div class="detail-value">${sub.expires_at ? this.formatDate(sub.expires_at) : '‚Äî'}</div>
                    </div>
                </div>
                <div class="item-actions">
                    ${sub.has_config ? `
                        <button class="btn btn-primary" onclick="dashboardApp.downloadConfig(${sub.id})">
                            –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
                        </button>
                        <button class="btn btn-secondary" onclick="dashboardApp.showQRCode(${sub.id})">
                            QR-–∫–æ–¥
                        </button>
                    ` : ''}
                    ${this.isExpired(sub.expires_at) ? `
                        <button class="btn btn-success" onclick="window.location.href='/'">
                            –ü—Ä–æ–¥–ª–∏—Ç—å
                        </button>
                    ` : ''}
                </div>
            </div>
        `).join('');
    }
    
    async loadConfigs() {
        const container = document.getElementById('configsList');
        if (!container) return;
        
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...</div>';
        
        try {
            const response = await this.apiCall('/api/user/configs');
            if (response.ok) {
                this.renderConfigs(response.configs);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:', error);
            container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</div>';
        }
    }
    
    renderConfigs(configs) {
        const container = document.getElementById('configsList');
        if (!container) return;
        
        if (configs.length === 0) {
            container.innerHTML = '<div class="empty-state">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</div>';
            return;
        }
        
        container.innerHTML = configs.map(config => `
            <div class="config-item">
                <div class="item-header">
                    <div class="item-title">${config.plan}</div>
                    <div class="item-status ${this.getStatusClass(config.status, config.expires_at)}">
                        ${this.getStatusText(config.status, config.expires_at)}
                    </div>
                </div>
                <div class="item-details">
                    <div class="detail-item">
                        <div class="detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</div>
                        <div class="detail-value">${this.formatDate(config.created_at)}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ</div>
                        <div class="detail-value">${config.expires_at ? this.formatDate(config.expires_at) : '‚Äî'}</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">–§–∞–π–ª</div>
                        <div class="detail-value">${config.has_file ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω'}</div>
                    </div>
                </div>
                <div class="item-actions">
                    ${config.has_file ? `
                        <button class="btn btn-primary" onclick="dashboardApp.downloadConfig(${config.id})">
                            –°–∫–∞—á–∞—Ç—å .conf
                        </button>
                        <button class="btn btn-secondary" onclick="dashboardApp.showQRCode(${config.id})">
                            –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥
                        </button>
                    ` : `
                        <div class="text-muted">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
                    `}
                </div>
            </div>
        `).join('');
    }
    
    async loadTrafficStats() {
        const container = document.getElementById('trafficStats');
        if (!container) return;
        
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>';
        
        try {
            const response = await this.apiCall('/api/user/traffic');
            if (response.ok) {
                this.renderTrafficStats(response);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:', error);
            container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
        }
    }
    
    renderTrafficStats(trafficData) {
        const container = document.getElementById('trafficStats');
        if (!container) return;
        
        if (!trafficData.traffic || trafficData.traffic.length === 0) {
            container.innerHTML = '<div class="empty-state">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ</div>';
            return;
        }
        
        container.innerHTML = `
            <div class="traffic-summary">
                <div class="stats-card">
                    <div class="stats-icon">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M3 3v18h18"></path>
                            <path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3"></path>
                        </svg>
                    </div>
                    <div class="stats-content">
                        <h3>–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫</h3>
                        <div class="stat-value">${this.formatBytes(trafficData.total_rx + trafficData.total_tx)}</div>
                        <div class="stat-label">‚Üì ${this.formatBytes(trafficData.total_rx)} ‚Üë ${this.formatBytes(trafficData.total_tx)}</div>
                    </div>
                </div>
            </div>
            <div class="traffic-details">
                ${trafficData.traffic.map(t => `
                    <div class="traffic-item">
                        <div class="traffic-header">
                            <div class="traffic-plan">${t.plan}</div>
                            <div class="traffic-status ${t.online ? 'online' : 'offline'}">
                                ${t.online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
                            </div>
                        </div>
                        <div class="traffic-stats">
                            <div class="traffic-stat">
                                <span class="label">IP:</span>
                                <span class="value">${t.client_ip}</span>
                            </div>
                            <div class="traffic-stat">
                                <span class="label">–°–∫–∞—á–∞–Ω–æ:</span>
                                <span class="value">${this.formatBytes(t.rx_bytes)}</span>
                            </div>
                            <div class="traffic-stat">
                                <span class="label">–ó–∞–≥—Ä—É–∂–µ–Ω–æ:</span>
                                <span class="value">${this.formatBytes(t.tx_bytes)}</span>
                            </div>
                            <div class="traffic-stat">
                                <span class="label">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                                <span class="value">‚Üì ${this.formatSpeed(t.speed_rx)} ‚Üë ${this.formatSpeed(t.speed_tx)}</span>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    async loadNotifications() {
        const container = document.getElementById('notificationsList');
        if (!container) return;
        
        container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</div>';
        
        try {
            const response = await this.apiCall('/api/user/notifications');
            if (response.ok) {
                this.renderNotifications(response.notifications);
                this.updateNotificationBadge(response.unread_count);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>';
        }
    }
    
    renderNotifications(notifications) {
        const container = document.getElementById('notificationsList');
        if (!container) return;
        
        if (notifications.length === 0) {
            container.innerHTML = '<div class="empty-state">–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>';
            return;
        }
        
        container.innerHTML = notifications.map(notification => `
            <div class="notification-item ${notification.is_read ? '' : 'unread'}">
                <div class="notification-header">
                    <div class="notification-title">${notification.title}</div>
                    <div class="notification-time">${this.formatDate(notification.created_at)}</div>
                </div>
                <div class="notification-message">${notification.message}</div>
                ${!notification.is_read ? `
                    <div class="notification-actions">
                        <button class="btn btn-ghost btn-sm" onclick="dashboardApp.markNotificationRead(${notification.id})">
                            –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                        </button>
                    </div>
                ` : ''}
            </div>
        `).join('');
    }
    
    async loadSettings() {
        if (!this.currentUser) return;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const usernameInput = document.getElementById('usernameInput');
        const emailInput = document.getElementById('emailInput');
        const languageSelect = document.getElementById('languageSelect');
        
        if (usernameInput) {
            usernameInput.value = this.currentUser.username || '';
        }
        if (emailInput) {
            emailInput.value = this.currentUser.email || '';
        }
        if (languageSelect) {
            languageSelect.value = this.currentUser.language_code || 'ru';
        }
    }
    
    async downloadConfig(orderId) {
        try {
            const response = await fetch(`/download/${orderId}`, {
                headers: {
                    'Authorization': `Bearer ${this.authToken}`
                }
            });
            
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `securelink_${orderId}.conf`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                this.showToast('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∞—á–∞–Ω–∞', 'success');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', 'error');
        }
    }
    
    async showQRCode(orderId) {
        try {
            const response = await fetch(`/qr/${orderId}`, {
                headers: {
                    'Authorization': `Bearer ${this.authToken}`
                }
            });
            
            if (response.ok) {
                const blob = await response.blob();
                const img = new Image();
                img.onload = () => {
                    const canvas = document.getElementById('qrCanvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                    
                    this.showModal('configModal');
                    document.getElementById('qrContainer').style.display = 'block';
                };
                img.src = URL.createObjectURL(blob);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞', 'error');
        }
    }
    
    async markNotificationRead(notificationId) {
        try {
            const response = await this.apiCall(`/api/user/notifications/${notificationId}/read`, 'POST');
            if (response.ok) {
                this.showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', 'success');
                await this.loadNotifications();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            this.showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        }
    }
    
    async markAllNotificationsRead() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        this.showToast('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }
    
    async saveSettings() {
        const email = document.getElementById('emailInput')?.value;
        const language = document.getElementById('languageSelect')?.value;
        
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            this.showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }
    
    async logout() {
        try {
            if (this.authToken) {
                await this.apiCall('/auth/logout', 'POST');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        } finally {
            localStorage.removeItem('authToken');
            this.authToken = null;
            this.currentUser = null;
            window.location.href = '/';
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    async apiCall(endpoint, method = 'GET', body = null) {
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        if (this.authToken) {
            options.headers['Authorization'] = `Bearer ${this.authToken}`;
        }
        
        if (body) {
            options.body = JSON.stringify(body);
        }
        
        const response = await fetch(endpoint, options);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ API');
        }
        
        return data;
    }
    
    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
        }
    }
    
    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }
    
    showToast(message, type = 'info') {
        const container = document.getElementById('toastContainer');
        if (!container) return;
        
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerHTML = `
            <div class="toast-content">
                <span>${message}</span>
            </div>
        `;
        
        container.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 5000);
    }
    
    updateNotificationBadge(count) {
        const badge = document.getElementById('notificationBadge');
        if (badge) {
            if (count > 0) {
                badge.textContent = count;
                badge.style.display = 'inline-block';
            } else {
                badge.style.display = 'none';
            }
        }
    }
    
    formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    formatSpeed(bytesPerSec) {
        if (bytesPerSec === 0) return '0 B/s';
        return this.formatBytes(bytesPerSec) + '/s';
    }
    
    formatDate(dateString) {
        if (!dateString) return '‚Äî';
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    isExpired(expiresAt) {
        if (!expiresAt) return false;
        return new Date(expiresAt) < new Date();
    }
    
    getStatusClass(status, expiresAt) {
        if (this.isExpired(expiresAt)) return 'expired';
        if (status === 'paid') return 'active';
        if (status === 'pending') return 'pending';
        return 'expired';
    }
    
    getStatusText(status, expiresAt) {
        if (this.isExpired(expiresAt)) return '–ò—Å—Ç–µ–∫–ª–∞';
        if (status === 'paid') return '–ê–∫—Ç–∏–≤–Ω–∞';
        if (status === 'pending') return '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
        return '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let dashboardApp;
document.addEventListener('DOMContentLoaded', () => {
    dashboardApp = new DashboardApp();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.dashboardApp = dashboardApp;

// ==============================
// üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// ==============================
function formatBytes(bytes) {
    return (bytes / 1024 / 1024).toFixed(2) + " MB";
}

function formatSpeed(bytesPerSec) {
    return (bytesPerSec / 1024).toFixed(2) + " KB/s";
}

function formatLastSeen(timestamp, online) {
    if (online) return "—Å–µ–π—á–∞—Å"; // –∫–ª–∏–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω
    if (!timestamp || timestamp === 0) return "-";

    const now = Date.now();
    const delta = Math.floor((now / 1000) - timestamp);

    if (delta < 60) return "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥";
    if (delta < 3600) return `${Math.floor(delta / 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    if (delta < 86400) return `${Math.floor(delta / 3600)} —á. –Ω–∞–∑–∞–¥`;

    // –±–æ–ª–µ–µ —Å—É—Ç–æ–∫ –Ω–∞–∑–∞–¥ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const date = new Date(timestamp * 1000);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    return `${day}.${month} ${hours}:${minutes}`;
}

// ==============================
// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// ==============================
function updateStats() {
    fetch("/admin/stats")
        .then(resp => resp.json())
        .then(data => {
            // —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            document.getElementById("cpu").innerText = data.cpu_percent;
            document.getElementById("ram").innerText = data.ram_percent;
            document.getElementById("disk").innerText = data.disk_percent;

            const tbody = document.querySelector("#traffic-table tbody");
            tbody.innerHTML = "";

            data.clients.forEach(c => {
                const tr = document.createElement("tr");
                tr.id = `client-${c.public_key}`;

                // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –º–æ—Ä–≥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ email
                tr.innerHTML = `
                    <td data-label="Email" class="${c.online ? 'email-online' : ''}">${c.email}</td>
                    <td data-label="Plan">${c.plan}</td>
                    <td data-label="Client IP">${c.client_ip}</td>
                    <td data-label="Public Key">${c.public_key}</td>
                    <td data-label="RX">${formatBytes(c.rx_bytes)}</td>
                    <td data-label="TX">${formatBytes(c.tx_bytes)}</td>
                    <td class="${c.online ? 'online' : 'offline'}" data-label="Online">${c.online ? '–î–∞' : '–ù–µ—Ç'}</td>
                    <td data-label="Last seen">${formatLastSeen(c.last_seen || c.start_date, c.online)}</td>
                    <td data-label="Start">${c.start_date || '-'}</td>
                    <td data-label="End">${c.end_date || '-'}</td>
                    <td data-label="Action"><button class="delete-btn" data-key="${c.public_key}">–£–¥–∞–ª–∏—Ç—å</button></td>
                `;
                tbody.appendChild(tr);
            });

            // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
            document.querySelectorAll(".delete-btn").forEach(button => {
                button.onclick = () => {
                    const publicKey = button.dataset.key;
                    if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?")) return;
                    fetch(`/admin/delete/${encodeURIComponent(publicKey)}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include'
                    })
                    .then(response => {
                        if (response.ok) {
                            const row = document.getElementById(`client-${publicKey}`);
                            if (row) row.remove();
                        } else {
                            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞");
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞");
                    });
                };
            });
        })
        .catch(err => console.error(err));
}

// ==============================
// üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
// ==============================
setInterval(updateStats, 5000);
updateStats(); // –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Å—Ä–∞–∑—É
#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è SecureLink VPN
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""

import os
import sys
import json
import logging
import asyncio
import psycopg2
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from user_manager import UserManager
from App import create_order_internal, get_conn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "8271035383:AAHTbW40nfLzucEU7ZYWQziGv16kDx4ph5o")
WEB_APP_URL = os.environ.get("WEB_APP_URL", "https://a2c4260d9b8d.ngrok-free.app")
YOOKASSA_SHOP_ID = os.environ.get("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.environ.get("YOOKASSA_SECRET_KEY")

# –¢–∞—Ä–∏—Ñ—ã
PLANS = {
    9: {"name": "3 –¥–Ω—è", "price": 0, "days": 3, "emoji": "üÜì"},
    1: {"name": "1 –º–µ—Å—è—Ü", "price": 99, "days": 30, "emoji": "üìÖ"},
    2: {"name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 499, "days": 180, "emoji": "üìÜ"},
    3: {"name": "12 –º–µ—Å—è—Ü–µ–≤", "price": 999, "days": 365, "emoji": "üóìÔ∏è"}
}

class SecureLinkBot:
    def __init__(self):
        self.application = None
        self.user_manager = None
        
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conninfo = os.environ.get("DATABASE_URL", "postgresql://alexanderkhokhlov@localhost/securelink")
            self.user_manager = UserManager(lambda: psycopg2.connect(conninfo))
            logger.info("Database connection initialized")
        except Exception as e:
            logger.error(f"Failed to initialize database: {e}")
            sys.exit(1)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start plan_1)
        args = context.args
        selected_plan = None
        
        if args and args[0].startswith('plan_'):
            try:
                selected_plan = int(args[0].split('_')[1])
            except (ValueError, IndexError):
                pass
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_data = self.user_manager.get_or_create_telegram_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                language_code=user.language_code
            )
            logger.info(f"User {user.id} ({user.username}) started bot")
        except Exception as e:
            logger.error(f"Error creating user: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
üîí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecureLink VPN!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É VPN —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º WireGuard.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ VPN –∑–∞ 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ üí≥ –ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ YooKassa
‚Ä¢ üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ QR-–∫–æ–¥
‚Ä¢ üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ üîß –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
        """
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
            [InlineKeyboardButton("üìä –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account")],
            [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=f"{WEB_APP_URL}/dashboard"))],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if selected_plan and selected_plan in PLANS:
            await self.show_plan_details(update, context, selected_plan)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üîí <b>SecureLink VPN - –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/plans - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã
/account - –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard
5Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä—ã–º VPN!

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
üìß mailrealeden@yahoo.com
ü§ñ –≠—Ç–æ—Ç –±–æ—Ç

<b>–ü—Ä–æ—Ç–æ–∫–æ–ª:</b> WireGuard
<b>–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:</b> ChaCha20, Poly1305, Curve25519
        """
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
            [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=f"{WEB_APP_URL}/dashboard"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def plans_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /plans"""
        await self.show_plans(update, context)
    
    async def account_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /account"""
        await self.show_account(update, context)
    
    async def show_plans(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
        plans_text = """
üí∞ <b>–¢–∞—Ä–∏—Ñ—ã SecureLink VPN</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:
        """
        
        keyboard = []
        for plan_id, plan in PLANS.items():
            if plan_id == 9:  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                button_text = f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ"
            else:
                button_text = f"{plan['emoji']} {plan['name']} - {plan['price']} ‚ÇΩ"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"plan_{plan_id}")])
        
        keyboard.append([InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=f"{WEB_APP_URL}/dashboard"))])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                plans_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                plans_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
    
    async def show_plan_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–∞—Ä–∏—Ñ–∞"""
        if plan_id not in PLANS:
            return
        
        plan = PLANS[plan_id]
        user = update.effective_user
        
        plan_text = f"""
{plan['emoji']} <b>{plan['name']}</b>

<b>–¶–µ–Ω–∞:</b> {plan['price']} ‚ÇΩ
<b>–°—Ä–æ–∫:</b> {plan['days']} –¥–Ω–µ–π
<b>–¢—Ä–∞—Ñ–∏–∫:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
<b>–°–µ—Ä–≤–µ—Ä—ã:</b> –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> 24/7

<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª WireGuard
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
‚úÖ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏

<b>–ì–æ—Ç–æ–≤—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?</b>
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_plans")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                plan_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                plan_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
    
    async def show_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.user_manager.get_user_by_telegram_id(user.id)
            if not user_data:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            subscriptions = self.user_manager.get_user_subscriptions(user_data['id'])
            
            account_text = f"""
üë§ <b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name or ''}
<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>ID:</b> {user.id}

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
            """
            
            if subscriptions:
                for sub in subscriptions:
                    status_emoji = "‚úÖ" if sub['status'] == 'active' else "‚ùå"
                    account_text += f"\n{status_emoji} {sub['plan']} - –¥–æ {sub['expires_at']}"
            else:
                account_text += "\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
            
            keyboard = [
                [InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
                [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=f"{WEB_APP_URL}/dashboard"))],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    account_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    account_text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error showing account: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "show_plans":
            await self.show_plans(update, context)
        elif data == "my_account":
            await self.show_account(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data.startswith("plan_"):
            plan_id = int(data.split("_")[1])
            await self.show_plan_details(update, context, plan_id)
        elif data.startswith("pay_"):
            plan_id = int(data.split("_")[1])
            await self.create_payment(update, context, plan_id)
        elif data == "show_stats":
            await self.show_stats(update, context)
    
    async def create_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        if plan_id not in PLANS:
            await update.callback_query.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
            return
        
        plan = PLANS[plan_id]
        user = update.effective_user
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = create_order_internal(
                email=f"{user.id}@telegram.user",
                plan_id=plan_id,
                user_id=None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                telegram_id=user.id
            )
            
            if plan['price'] == 0:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ - —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                await self.activate_free_plan(update, context, order)
            else:
                # –ü–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ - —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                await self.create_yookassa_payment(update, context, order, plan)
                
        except Exception as e:
            logger.error(f"Error creating payment: {e}")
            await update.callback_query.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def activate_free_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE, order):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.edit_message_text(
                "üéâ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                "–í–∞—à VPN –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ 3 –¥–Ω—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Error activating free plan: {e}")
    
    async def create_yookassa_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, order, plan):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YooKassa
            # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            payment_text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ "{plan['name']}"</b>

<b>–°—É–º–º–∞:</b> {plan['price']} ‚ÇΩ
<b>–ó–∞–∫–∞–∑:</b> #{order['id']}

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ üì± –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
‚Ä¢ üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥

<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b>
            """
            
            keyboard = [
                [InlineKeyboardButton("üöÄ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(url=f"{WEB_APP_URL}/dashboard"))],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_plans")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                payment_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error creating YooKassa payment: {e}")
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user = update.effective_user
        
        try:
            user_data = self.user_manager.get_user_by_telegram_id(user.id)
            if not user_data:
                await update.callback_query.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
            traffic_stats = self.user_manager.get_user_traffic_stats(user_data['id'])
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_data['created_at']}

<b>–¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü:</b>
‚Ä¢ üì• –°–∫–∞—á–∞–Ω–æ: {traffic_stats.get('download', 0)} MB
‚Ä¢ üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {traffic_stats.get('upload', 0)} MB
‚Ä¢ üìä –í—Å–µ–≥–æ: {traffic_stats.get('total', 0)} MB

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b> {traffic_stats.get('sessions', 0)}
            """
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_account")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                stats_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error showing stats: {e}")
            await update.callback_query.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.init_db()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("plans", self.plans_command))
        self.application.add_handler(CommandHandler("account", self.account_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting SecureLink Telegram Bot...")
        await self.application.run_polling()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SecureLinkBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
